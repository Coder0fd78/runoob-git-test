/**
基本介绍：
    接口就是给出一些没有实现的方法，封装到一起到某个类要使用的时候，再根据具体情况把这些方法写出来
语法：
    interface 接口名{
        //属性
            //方法
    }
    *class 类名 implements接口{
         //自己的属性
            //自己的方法
    必须实现接口的抽象方法

    }
注意：再jdk7前，接口里所有方法都没有方法体，即都是抽象方法。，在JDK8后接口可以有静态方法，默认方法，也就是说接口可以有方法的具体实现
基本细节：
    1.不能被实例化
    2.接口中所有方法是public方法，接口中抽象方法，可以不用abstract修饰
    3.一个普通类实现接口，就必须将该接口的所有方法都实现
    4.抽象类去实现接口时，可以不用实现接口的方法
    5.一个类可以同时实现多个接口
    6.接口中的属性只能时final，而且时 public static final 数据类型
        比如：int a=1; 实际上是 public static final int a=1;
    7.接口属性的访问形式： 接口名.属性名
    8.接口不能继承其他类但是可以继承多个别的接口
    9.接口的修饰符只能是public 和默认

**接口VS继承
    1.继承的价值主要在于：解决代码的复用性和维护性
    2.接口的价值主要在于：设计，设计好各种规范（方法），让其他类去实现这些方法，即更加灵活
    继承要满足 is-a的关系，而继承只要满足 like-a关系
    **：接口在一定程度上可以实现代码的解耦【即：接口规范性+动态绑定】

**接口的多态特性
    1）：多态参数
    2）：多态数组
    3）：接口存在多态传递的现象

**/

