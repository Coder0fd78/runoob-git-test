/**
    $什么是抽象类：
        当父类的某些方法，需要声明，但又不确定如何实现时，可以将其声明为抽象方法，那么这个类就是抽象类
            //思考：这里eat，这里你实现了也没什么意义。
                //即：父类方法不确定性的问题
                //===》考虑将该方法设计为抽象方法
                //==》抽象方法就是没有实现的方法
                //==》所谓没有实现就是没有方法体
                //==》一般来说，抽象类会被继承，有其子类来实现抽象方法
    $细节：
        1.用abstract关键字来修饰一个类时，这个类就叫做抽象类，访问修饰符 abstract{
            }
        2.用abstract关键字来修饰一个方法时，这个方法就是抽象方法，访问修饰符 abstract返回类型 方法名（参数列表）；//没有方法体
        3.抽象类的价值更多作用是在于设计，是设计者设计好后，让子类继承并实现抽象类（）
        4.抽象类是考官比较爱问知识点，在框架和设计模式中使用较多


            /**
                 * 1.抽象类不能被实例化
                 * 2.抽象类不一定包含abstract方法，也就是说，抽象类可以没有abstract方法
                 * 3.一旦包含abstract方法，则这个类必须声明为abstract类
                 * 4.abstract只能修饰类和方法，不能修饰属性和其他
                 * 5.抽象类可以有任意的成员【抽象类本质还是类】
                 * 6.抽象方法不能有主题
                 * 7.如果一个类继承了抽象类，则他必须实现抽象类的所有抽象方法，除非他自己也声明为抽象方法
                 * 8.抽象方法不能使用 private，final 和static 来修饰，因为这些关键字都是和重写相违背的
                 * */


             /*
             抽象类的最佳实现，模板设计模式


             **/

*/